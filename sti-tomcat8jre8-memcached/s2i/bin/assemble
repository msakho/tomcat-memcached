#!/bin/bash -x

printenv

PID_FILE=/usr/local/tomcat/pid

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mkdir -p $HOME/.m2
    #find /opt/s2i/destination/artifacts/
    mv -v /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2/
  fi
}

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
DEPLOY_DIR=/usr/local/tomcat/webapps

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."

  if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
    mkdir -p $HOME/.m2
    mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
  fi

  cp -v $LOCAL_SOURCE_DIR/configuration/* /usr/local/tomcat/conf/
fi

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk_1.8.0

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="-B package -Popenshift " #-DskipTests"
  else
    if [[ "$MAVEN_SETTINGS" = /* ]]; then
       [ ! -e "$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in the image. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $MAVEN_SETTINGS"
    else
       [ ! -e "$LOCAL_SOURCE_DIR/$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in your source code. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/$MAVEN_SETTINGS"
    fi
  fi

  if [ -z "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi

  # Compute available memory
  CONTAINER_HEAP_PERCENT=${CONTAINER_HEAP_PERCENT:-0.50}
  CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`
  DEFAULT_MEMORY_CEILING=$((2**40-1))
  if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then
    CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
    CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')
    JAVA_HEAP_MAX=-Xmx${CONTAINER_HEAP_MAX}m
  fi

  if [ -z $JAVA_GC_OPTS ]; then
    # note - MaxPermSize no longer valid with v8 of the jdk ... used to have -XX:MaxPermSize=100m
    JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:MaxMetaspaceSize=100m"
  fi
  if [ ! -z "${CONTAINER_CORE_LIMIT}" ]; then
    JAVA_CORE_LIMIT="-XX:ParallelGCThreads=${CONTAINER_CORE_LIMIT} -Djava.util.concurrent.ForkJoinPool.common.parallelism=${CONTAINER_CORE_LIMT} -XX:CICompilerCount=2"
  fi
  if [ ! -z "${USE_JAVA_DIAGNOSTICS}" ]; then
    JAVA_DIAGNOSTICS="-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
  fi

  # When arguments such as max heap size are repeated, the JVM respects the last value provided,
  # so by setting the user provided MAVEN_OPTS value last, we allow the user to override any 
  # of the values we calculated above.
  MAVEN_OPTS="${JAVA_GC_OPTS} ${JAVA_HEAP_MAX} ${JAVA_CORE_LIMIT} ${JAVA_DIAGNOSTICS} ${MAVEN_OPTS}"
  echo "MAVEN_OPTS=${MAVEN_OPTS}"

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Copying built war files into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null
else
  echo "Not a Maven project..."
  exit 1
fi

if [[ -z ${JENKINS_TOKEN} || -z ${JENKINS_NAMESPACE} ]]; then
  echo 'one or more Jenkins variables are undefined, do not attempt to upload JUnit test artifacts'
else
  /usr/bin/oc login https://kubernetes.default.svc.cluster.local --insecure-skip-tls-verify --token=${JENKINS_TOKEN}
  pods=`/usr/bin/oc get pods -n ${JENKINS_NAMESPACE}`
  echo "PODS : $pods"
  jenkins=`oc get pods | grep "Running" | grep jenkins | cut -d' ' -f1`
  /usr/bin/oc rsync $LOCAL_SOURCE_DIR/target $jenkins:$WORKSPACE
fi

if [ -d ${LOCAL_SOURCE_DIR}/cfg ]; then
  echo "Copying config files from project..."
  cp cfg/* /usr/local/tomcat/conf/
  chgrp -R 0 /usr/local/tomcat/conf/
  chmod -R g+rw /usr/local/tomcat/conf/
fi

if [ -d $LOCAL_SOURCE_DIR/${ARTIFACT_DIR} ]; then
  echo "Copying war artifacts files from project..."
  cp ${LOCAL_SOURCE_DIR}/${ARTIFACT_DIR}/*.war ${DEPLOY_DIR} >& /dev/null
  chgrp -R 0 $DEPLOY_DIR
  chmod -R g+rw $DEPLOY_DIR
else
  echo "$LOCAL_SOURCE_DIR/${ARTIFACT_DIR} does not exist"
fi

echo "...done"
